```{r}
library(grandR)
library(ggplot2)
library(Seurat)
library(cowplot)
library(ggpubr)
library(ggrastr)
library(reshape2)

#Plot variables, colors
legendsize = 9
textsize=11
axissize=10
mainfont = "Arial"
responsecolors = c("#0033a3ff", "#eec721ff","#a30000ff")
prevtotalcolors = c("#298c8c", "#800074")
colors=c(RColorBrewer::brewer.pal(9,"Blues")[7],RColorBrewer::brewer.pal(9,"Reds")[c(2,4,6,8)],RColorBrewer::brewer.pal(9,"Greens")[c(3)],'gray80','gray30')
tcolors = c(none='gray80',Low='gray40',Middle='#3182bd',High='#de2d26')

#Hetseq variables
group_quants = c(0.25,0.75)
lfc.cutoff=0.1
p.cutoff=0.05
split=NULL
cross=10
numcores=64
numgenes=3000
posClass = "High"
features_baseline <- c("test")
features_baseline_cellcycle<-c("cc_umap1", "cc_umap2")
#genes_classif <- rownames(HVFInfo(data)[HVFInfo(data)$mean>0.3,])
genes_classif = rownames(data)

# Pathway genes
gc_regnetwork <- read.csv("data/pathway_gcregnetwork.csv")$x
nucl_receptor_metapathway <- read.csv("data/pathway_nuclearreceptor_metapathway.csv")$x
gluc_recep_pathway <-read.csv("data/pathway_glucreceptor.csv")$x
cytoskeletal_signaling <- read.csv("data/pathway_cytoskeletalsignaling.csv")$x
gc_manualfind <- c("ZFP36L1", "TRAM1", "HSP90AB1", "XPO1")#, "PMEPA1")

setwd("/projects/viro/berg/HetSeq/SciFate")
source("../functions.R")

data <- readRDS("objects/data_preprocessed_scifateFiltering_mincol100.rds")
data<-NormalizeData(data, assay = "RNA")
data<-NormalizeData(data, assay = "newRNA")
data<-NormalizeData(data, assay = "oldRNA")
data<-NormalizeData(data, assay = "prevRNA")
data<-NormalizeData(data, assay = "newRNA_recalc")
data<-NormalizeData(data, assay = "oldRNA_recalc")
data<-NormalizeData(data, assay = "prevRNA_recalc")

gc_genes <- readRDS("/projects/viro/sakellaridi/scifate/objects/gc_genes.rds")
data$dex.percent <- Seurat::PercentageFeatureSet(object=data, features=intersect(gc_genes,rownames(data)), assay="RNA")
data <- AddModuleScore(data, list(dex.percent=intersect(rownames(data),gc_genes)), name = "DEX.modulescore")
data <- AddModuleScore(data, list(dex.percent=intersect(rownames(data),gc_genes)), name = "DEX.modulescore.new", assay = "newRNA_recalc")
data$dex.percent <- data$DEX.modulescore1
data$dex.percent.new <- data$DEX.modulescore.new1
data$DEX.modulescore1<-NULL
data$DEX.modulescore.new1<-NULL

expr <- HVFInfo(subset(data, subset = treatmentTime == "0h"))

expressedGenes <- rownames(expr[expr$mean>0.5,])
```

```{r Fig1BCD}
df=as.data.frame(data@reductions$umap@cell.embeddings)
df$Condition=data$treatmentTime
df$dex.percent.new = data$dex.percent.new
ggplot(df, aes(x=umap_1,y=umap_2,color=dex.percent.new))+geom_point_rast(size=0.2)+scale_color_viridis_c(option = "turbo", name="DEX score", limits=c(0,0.8), oob=scales::squish)+theme_cowplot()+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_blank(), legend.text = element_text(size=legendsize), axis.title = element_blank(), axis.ticks = element_blank(),legend.position = "right", axis.line = element_line())
#ggsave("plots/scifateFiltering/dimplot_gc.png", width=3.3, height=2.25)
#ggsave("plots/scifateFiltering/dimplot_gc.svg", width=3, height=2, device=grDevices::svg())

ggplot(df, aes(x=umap_1,y=umap_2,color=Condition))+geom_point_rast(size=0.2)+scale_color_brewer(palette="Set1")+theme(legend.title = element_blank())+guides(color = guide_legend(override.aes = list(size = 2)))+theme_cowplot()+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_blank(), legend.text = element_text(size=legendsize), axis.title = element_blank(), axis.ticks = element_blank(),legend.position = "right", axis.line = element_line(), legend.title = element_blank())
#ggsave("plots/scifateFiltering/dimplot_time.png", width=3.3, height=2.25)
#ggsave("plots/scifateFiltering/dimplot_time.svg", width=3, height=2, device=grDevices::svg())


tab <- FetchData(data, c("treatmentTime", "dex.percent", "dex.percent.new"))
tab_melt <- melt(tab)
ggplot(tab_melt, aes(x=treatmentTime, y=value,color=variable))+geom_boxplot()+theme_cowplot()+theme(axis.title.x = element_blank())+
  scale_color_manual(values = c("#298c8c", "#800074"),labels = c("total RNA", "new RNA"))+ylab("DEX score")+theme(text=element_text(size = textsize, family = mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize), legend.title = element_blank(), legend.position = "bottom")
# ggsave("plots/scifateFiltering/gcpercent_box.png", height=2.2,width=2.2, bg="white")
# ggsave("plots/scifateFiltering/gcpercent_box.svg", height=2.2,width=2.2, bg="white", device=grDevices::svg())
```

```{r}
treatment.list <- SplitObject(subset(data, subset = treatmentTime %in% c("0h", "2h")), split.by = "treatmentTime")
D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc")
)
D.list = prune(D.list)
trajectories_prevRNA = mincostflow(D.list)
colnames(trajectories_prevRNA) <- c("0h", "2h")
br1=quantile(data$dex.percent.new[trajectories_prevRNA$`2h`], probs = group_quants)[1]
br2=quantile(data$dex.percent.new[trajectories_prevRNA$`2h`], probs = group_quants)[2]

ggplot(data@meta.data[trajectories_prevRNA$`2h`,], aes(x=dex.percent.new))+stat_ecdf()+theme_cowplot()+geom_vline(xintercept = c(br1,br2), col="red")+xlab("DEX score")+ylab("ECDF")+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))
#ggsave("plots/scifateFiltering/ecdf_gc.svg", width=5,height=3,device=grDevices::svg())
gc.group = cut(data$dex.percent.new[trajectories_prevRNA$`2h`],breaks=c(-10,br1,br2,10),labels=c("Low","Middle","High"))

data$Trajectory = "none"
data$Trajectory[trajectories_prevRNA[,1]] = as.character(gc.group)
data$Trajectory[trajectories_prevRNA[,2]]  = as.character(gc.group)
data$Trajectory = factor(data$Trajectory,levels=c("none", "Low", "Middle", "High"))

genes = rownames(data)
uninf=t(as.matrix(FetchData(data,vars = genes,cells = trajectories_prevRNA$`0h`,layer = "data")))[,trajectories_prevRNA$`0h`]

hs_prevRNA = compute.hetseq(uninf,gc.group=="High",gc.group=="Low")
n = table(cut(hs_prevRNA$LFC, breaks = c(-Inf, -lfc.cutoff, lfc.cutoff, Inf)), factor(hs_prevRNA$Q > p.cutoff, levels = c("FALSE", "TRUE")))
n=n[c(1,3)]
PlotScatter(hs_prevRNA, x=LFC,y=-log10(Q), remove.outlier = FALSE, rasterize = T,size=-1)+
  geom_point_rast(size=0.5)+xlab(bquote(log[2]~FC~(`0h`)))+ylab(bquote("-" ~ log[10] ~ FDR))+geom_hline(yintercept=-log10(p.cutoff),linetype=2)+geom_vline(xintercept = c(-lfc.cutoff, lfc.cutoff), linetype = 2) + ggtitle("High vs Low DEX score (2h)") + annotate("label", size=0.36*9, x = c(-Inf, Inf), y = c(Inf, Inf), label = paste0("n=", as.numeric(n)), hjust = c(-0.1, 1.1), vjust = c(1.1, 1.1))+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))
# ggsave("/projects/viro/berg/HetSeq/SciFate/plots/scifateFiltering/VulcanoPlot_prevRNA.svg", width=2.7, height=2.8, device=grDevices::svg())

write.table(hs_prevRNA,"tables/SupplTable1.csv")

lower <- rownames(hs_prevRNA[hs_prevRNA$Q<p.cutoff & hs_prevRNA$LFC<(-lfc.cutoff),])
higher <- rownames(hs_prevRNA[hs_prevRNA$Q<p.cutoff & hs_prevRNA$LFC>lfc.cutoff,])
background <- rownames(data)
l = list(lower=lower,higher=higher,background=background)
saveRDS(l, "hs_result-2h_prevRNArecalc.rds")


cutoff = 0.77
tx_binary<-HetseqClassify(data, trajectories_prevRNA, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)
ggplot(tx_binary, aes(x=AUC, y=LFC,label=Gene, color=density2d(x=AUC,y=LFC, n = 1000)))+   annotate("rect", xmin=cutoff, xmax=Inf, ymin=-Inf, ymax=Inf, alpha=0.1, color="red")+ geom_point_rast(scale=0.5)+scale_color_viridis_c()+xlab("AUC")+
  geom_point_rast(data=tx_binary[tx_binary$Gene%in%gc_manualfind & tx_binary$AUC>cutoff,],aes(x=AUC,y=LFC),color="red",scale=0.5)+
  geom_point_rast(data=tx_binary[tx_binary$Gene%in%cytoskeletal_signaling & tx_binary$AUC>cutoff,],aes(x=AUC,y=LFC),color="cyan3",scale=0.5)+
  geom_point_rast(data=tx_binary[tx_binary$Gene%in%nucl_receptor_metapathway & tx_binary$AUC>cutoff,],aes(x=AUC,y=LFC),color="green",scale=0.5)+
  theme_cowplot()+ylab(bquote(log[2]~FC~(`0h`)))+ggtitle("Predicting High or Low DEX score (2h)")+
  geom_vline(xintercept = tx_binary["baseline",]$AUC, linetype="dashed")+geom_hline(yintercept = 0)+
  theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.position="none")+
    geom_label_repel(data=tx_binary[tx_binary$Gene%in%c("TRAM1", "ZFP36L1"),], aes(x=AUC, y=LFC, label=Gene), color="red", nudge_y =0.6 ,size=2.5)+
    geom_label_repel(data=tx_binary[tx_binary$Gene=="ACTN4",], aes(x=AUC, y=LFC, label=Gene), color="cyan3", nudge_y = 0.6,size=2.5)+
    geom_label_repel(data=tx_binary[tx_binary$Gene%in%c("SRGN", "GSR", "G6PD"),], aes(x=AUC, y=LFC, label=Gene), color="green2", nudge_y = -0.2,size=2.5)
# ggsave("/projects/viro/berg/HetSeq/SciFate/plots/scifateFiltering/Classifier_prevRNA.svg", width=5.3, height=2.8, device=grDevices::svg(), dpi = 1200)
write.table(tx_binary, "tables/SupplTable4.csv")

tg <- tx_binary[tx_binary$AUC>cutoff,]$Gene


#doubleML <- HetSeq_doubleML(data, trajectories_prevRNA, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), split=split, kernel="radial", basefeatures = features_baseline_cellcycle, posClass=posClass, cross=cross, num_cores = numcores, genes = expressedGenes)

#saveRDS(doubleML, file="objects/doubleML_0.5meanExprgenes.rds")
doubleML <- readRDS("objects/doubleML_0.5meanExprgenes.rds")
doubleML$padj <- p.adjust(doubleML$pval, method="BH")
df_ml <- merge(tx_binary, doubleML, by="Gene")


ggplot(df_ml, aes(x=Estimate, y=-log10(padj),color=density2d(Estimate,-log10(padj))))+geom_point_rast(scale = 0.5)+scale_color_viridis_c()+
  geom_point_rast(data=df_ml[df_ml$Gene%in%cytoskeletal_signaling & df_ml$padj<0.05,],aes(x=Estimate,y=-log10(padj)),color="cyan3", scale = 0.5)+
  geom_point_rast(data=df_ml[df_ml$Gene%in%nucl_receptor_metapathway & df_ml$padj<0.05,],aes(x=Estimate,y=-log10(padj)),color="green", scale = 0.5)+
    geom_point_rast(data=df_ml[df_ml$Gene%in%gc_manualfind & df_ml$padj<0.05,],aes(x=Estimate,y=-log10(padj)),color="red", scale = 0.5)+
      geom_label_repel(data=df_ml[df_ml$Gene%in%c("TRAM1", "ZFP36L1", "HSP90AB1", "XPO1"),], aes(x=Estimate, y=-log10(padj), label=Gene), color="red", nudge_y =0.6 ,size=2.5)+
    geom_label_repel(data=df_ml[df_ml$Gene=="ACTN4",], aes(x=Estimate, y=-log10(padj), label=Gene), color="cyan3", nudge_y = 0.6,size=2.5)+
    geom_label_repel(data=df_ml[df_ml$Gene%in%c("SRGN"),], aes(x=Estimate, y=-log10(padj), label=Gene), color="green2", nudge_y = 0.2, nudge_x=-0.1,size=2.5)+ggtitle("Predicting High or Low DEX score (2h) with Causal Inference")+
  geom_hline(yintercept = -log10(0.05))+theme_cowplot()+ylab(bquote("-" ~ log[10] ~ FDR))+
    theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.position="none")
#ggsave("/projects/viro/berg/HetSeq/SciFate/plots/scifateFiltering/VulcanoPlot_prevRNA_doubleML.svg", width=2.7, height=2.8, device=grDevices::svg())

df<-FetchData(data, c("TRAM1", "ZFP36L1", "ACTN4","GSR", "G6PD", "Trajectory", "treatmentTime"))
df <- df[df$Trajectory!="none" & df$treatmentTime=="0h",]
df_melt <- melt(df)

ggplot(df_melt[df_melt$value>0,], aes(x=Trajectory, y=value, fill=Trajectory))+geom_boxplot()+stat_compare_means(comparisons = list(c("Low", "Middle"),c("Middle", "High"), c("Low", "High")), label="p.signif", step.increase = c(0,0,0.15), size = 2)+scale_y_continuous(expand=expansion(add = c(0.2,0.75)))+
  facet_wrap(~variable, ncol=5, scales="free")+theme_cowplot()+ylab("Expression level (0h)")+xlab("Response Level")+scale_fill_manual(values=responsecolors)+theme(text=element_text(family="Arial", size=axissize),legend.position = "none", axis.text.y = element_text(size=axissize), axis.text.x=element_text(size=axissize, angle=-30, hjust=0), axis.title.y = element_text(size=textsize))
# ggsave("/projects/viro/berg/HetSeq/SciFate/plots/scifateFiltering/Classifier_hits.svg", width=5.3, height=2.5, device=grDevices::svg(), dpi = 1200)
rownames(doubleML)<-doubleML$Gene
doubleML$Gene <- NULL
doubleML$oldGeneNames<-NULL
 write.table(doubleML, "tables/SupplTable5.csv")
```

```{r Fig1A}
sub <- subset(data, subset = treatmentTime=="0h", cells = trajectories_prevRNA$`0h`)
t<-FetchData(sub, c("SLC27A2", "MCM5"))
t$Trajectory <- data$Trajectory[rownames(t)]
t$lastTimePoint <- trajectories_prevRNA[rownames(t) %in% trajectories_prevRNA$`0h`,]$`2h`
t$gc_lastTimePoint <-  data$dex.percent.new[t$lastTimePoint]
t$dex.percent.new<-NULL
t$lastTimePoint<-NULL
t_melt_last <- melt(t, id.vars=c("gc_lastTimePoint", "Trajectory"))
t_melt_last$value <- as.numeric(t_melt_last$value)
t_melt_last <- t_melt_last[t_melt_last$value>0,]
t_melt_last <- t_melt_last %>%
  mutate(variable = ifelse(variable == "SLC27A2", "Positive Modulator\n(SLC27A2)",
                                   ifelse(variable == "MCM5", "Negative Modulator\n(MCM5)", variable)))
t_melt_last$variable <- factor(t_melt_last$variable, levels = c("Positive Modulator\n(SLC27A2)", "Negative Modulator\n(MCM5)"))
ggplot(t_melt_last, aes(x=value, y=gc_lastTimePoint, color=gc_lastTimePoint))+geom_point_rast(raster.dpi = 600, size=0.1)+theme_cowplot()+scale_color_viridis_c(option = "turbo", name="% GC")+facet_wrap(~variable, scales="free", ncol=2,labeller = labeller(cyl = c("Positive modulator", "Negative Modulator")))+geom_smooth(method="glm", se=F, color="grey30")+theme(legend.position = "none", axis.text = element_blank(), axis.ticks = element_blank(), axis.title=element_text(size=8), strip.text = element_text(size=8))+xlab("Gene expression at first time point")+ylab("Response Level")
# #ggsave("plots/scatterplot_scheme.svg", width=3, height=1.6, device=grDevices::svg())
```


```{r HetSeq without convolution NTRs}

D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA")
)
D.list = prune(D.list)
trajectories_prevRNA_noConv = mincostflow(D.list)
colnames(trajectories_prevRNA_noConv) <- c("0h", "2h")
br1=quantile(data$dex.percent.new[trajectories_prevRNA_noConv$`2h`], probs = group_quants)[1]
br2=quantile(data$dex.percent.new[trajectories_prevRNA_noConv$`2h`], probs = group_quants)[2]

ggplot(data@meta.data[trajectories_prevRNA_noConv$`2h`,], aes(x=dex.percent.new))+stat_ecdf()+theme_cowplot()+geom_vline(xintercept = c(br1,br2), col="red")+xlab("DEX score")+ylab("ECDF")+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))
#ggsave("plots/scifateFiltering/ecdf_gc.svg", width=5,height=3,device=grDevices::svg())
gc.group = cut(data$dex.percent.new[trajectories_prevRNA_noConv$`2h`],breaks=c(-10,br1,br2,10),labels=c("Low","Middle","High"))

data$Trajectory = "none"
data$Trajectory[trajectories_prevRNA_noConv[,1]] = as.character(gc.group)
data$Trajectory[trajectories_prevRNA_noConv[,2]]  = as.character(gc.group)
data$Trajectory = factor(data$Trajectory,levels=c("none", "Low", "Middle", "High"))

genes = rownames(data)
uninf=t(as.matrix(FetchData(data,vars = genes,cells = trajectories_prevRNA_noConv$`0h`,layer = "data")))[,trajectories_prevRNA_noConv$`0h`]

hs_prevRNA_noConv = compute.hetseq(uninf,gc.group=="High",gc.group=="Low")
tx_binary_noConv<-HetseqClassify(data, trajectories_prevRNA_noConv, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)
ggplot(tx_binary_noConv, aes(x=AUC, y=LFC,label=Gene, color=density2d(x=AUC,y=LFC, n = 1000)))+   annotate("rect", xmin=0.754, xmax=Inf, ymin=-Inf, ymax=Inf, alpha=0.1, color="red")+ geom_point_rast(raster.dpi = 600)+scale_color_viridis_c()+xlab("AUC")+
  geom_point_rast(data=tx_binary_noConv[tx_binary_noConv$Gene%in%gc_manualfind & tx_binary_noConv$AUC>0.754,],aes(x=AUC,y=LFC),color="red")+
  geom_point_rast(data=tx_binary_noConv[tx_binary_noConv$Gene%in%cytoskeletal_signaling & tx_binary_noConv$AUC>0.754,],aes(x=AUC,y=LFC),color="cyan3")+
  geom_point_rast(data=tx_binary_noConv[tx_binary_noConv$Gene%in%nucl_receptor_metapathway & tx_binary_noConv$AUC>0.754,],aes(x=AUC,y=LFC),color="green")+
  theme_cowplot()+ylab(bquote(log[2]~FC~(`0h`)))+ggtitle("Predicting High or Low DEX score (2h)")+
  geom_vline(xintercept = tx_binary_noConv["baseline",]$AUC, linetype="dashed")+geom_hline(yintercept = 0)+
  theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.position="none")+
    geom_label_repel(data=tx_binary_noConv[tx_binary_noConv$Gene%in%c("TRAM1", "ZFP36L1"),], aes(x=AUC, y=LFC, label=Gene), color="red", nudge_y =0.6 ,size=2.5)+
      geom_label_repel(data=tx_binary_noConv[tx_binary_noConv$Gene=="ANXA1",], aes(x=AUC, y=LFC, label=Gene), color="red", nudge_y = -0.4,size=2.5)+
    geom_label_repel(data=tx_binary_noConv[tx_binary_noConv$Gene=="ACTN4",], aes(x=AUC, y=LFC, label=Gene), color="cyan3", nudge_y = 0.6,size=2.5)+
    geom_label_repel(data=tx_binary_noConv[tx_binary_noConv$Gene%in%c("HSP90AB1", "G6PD"),], aes(x=AUC, y=LFC, label=Gene), color="green2", nudge_y = -0.2,size=2.5)

hs_convNoConv <- merge(tx_binary, tx_binary_noConv, by="Gene")
colnames(hs_convNoConv) <- c("Gene", "AUC_conv", "LFC_conv", "AUC_noConv", "LFC_noConv")
ggplot(hs_convNoConv, aes(x=AUC_noConv, y=AUC_conv))+geom_point()+ggpubr::stat_cor()+theme_cowplot()+geom_smooth(method=lm)+labs(x="AUC (no Convolution)", y=" AUC (Convolution)")+geom_abline(slope = 1, color="red")
ggplot(hs_convNoConv, aes(x=LFC_noConv, y=LFC_conv))+geom_point()+ggpubr::stat_cor()+theme_cowplot()+geom_smooth(method=lm)+labs(x="LFC (no Convolution)", y=" LFC (Convolution)")+geom_abline(slope = 1, color="red")


#Pseudobulk per time point
write.table(grandR:::CreatePseudobulkTable(data, pseudobulk.column = "treatmentTime")[,c(2,1)],"data/pbfile_bytimepoints.tsv", row.names = F, quote = F, sep = "\t")
data_timepb <- data_grandR<- ReadGRAND3("data/grand3/scifate.pseudobulk.pb_treatmentTime", design=c("treatmentTime"))

# per Gene %new RNA
p_noConv <- rowSums(data@assays$newRNA$counts)/rowSums(data@assays$RNA$counts)
p_conv <- rowSums(data@assays$newRNA_recalc$counts)/rowSums(data@assays$RNA$counts)
p_pb <- rowSums(GetMatrix(data_timepb, "new.count"))/rowSums(GetMatrix(data_timepb, "count"))
g <- intersect(names(p_pb), names(p_conv))

df <- as.data.frame(cbind(p_noConv[g], p_conv[g], p_pb[g], rowSums(data@assays$RNA$counts)[g]))
colnames(df) <- c("p_noConv", "p_conv", "p_pb", "totalCounts")
df$Gene <- rownames(df)
df$countGroup <- cut(df$totalCounts, breaks = quantile(df$totalCounts), include.lowest = T)
df$countGroup <- cut(df$totalCounts, breaks = c(0, 668, 1336, 2227,6680, 22270, Inf), include.lowest = T)
#df[df$totalCounts==100,]$countGroup = "(100,431]"
df_melt <- melt(df[,c(1,2,3, 5,6)], id.vars=c("Gene", "countGroup"))
ggplot(df, aes(x=p_noConv, y=p_conv, color=density2d(p_noConv,p_conv)))+geom_point()+facet_wrap(~countGroup)+theme_cowplot()+geom_abline(slope=1,color="red")+scale_color_viridis_c()+theme(legend.position = "none")
ggplot(df, aes(x=p_noConv, y=p_pb, color=density2d(p_noConv,p_conv)))+geom_point()+facet_wrap(~countGroup)+theme_cowplot()+geom_abline(slope=1,color="red")+scale_color_viridis_c()+theme(legend.position = "none")
ggplot(df, aes(x=p_conv, y=p_pb, color=density2d(p_noConv,p_conv)))+geom_point()+facet_wrap(~countGroup)+theme_cowplot()+geom_abline(slope=1,color="red")+scale_color_viridis_c()+theme(legend.position = "none")
ggplot(df_melt, aes(x=variable, y=value, color=countGroup))+geom_boxplot()+theme_cowplot()

df$deltaNoConv <- df$p_noConv-df$p_pb
df$deltaConv <- df$p_conv-df$p_pb
df$pbGroup <- cut(df$p_pb, breaks = c(0,0.25,0.5,0.75,1), include.lowest = T)
df_melt <- melt(df[,c(5,6,7,8,9)], id.vars=c("Gene", "countGroup", "pbGroup"))

countLabel <- table(df$countGroup)

ggplot(df_melt, aes(x=variable,y=value, color=pbGroup))+geom_hline(yintercept = 0, linetype="dashed")+geom_boxplot()+theme_cowplot()+facet_wrap(~countGroup,labeller = labeller(countGroup = c("[0,668]"= paste0("<= 1 read in 10 cells (n=",countLabel[[1]],")"), "(668,1.34e+03]"=paste0("1 in 10 cells - 1 in 5 cells (n=",countLabel[[2]],")"), "(1.34e+03,2.23e+03]"=paste0("1 in 5 cells - 1 in 3 cells (n=",countLabel[[3]],")"), "(2.23e+03,6.68e+03]"=paste0("1 in 3 cells - 1 per cell (n=",countLabel[[4]],")"), "(6.68e+03,2.23e+04]"=paste0("1 per cell - 3 per cell (n=",countLabel[[5]],")"), "(2.23e+04,Inf]"=paste0("> 3 per cell (n=",countLabel[[6]],")"))))+scale_x_discrete(labels=c("-Convolution","+Convolution"))+labs(x=NULL, y="Δ NTR", color="Pseudobulk NTR")+scale_color_manual(labels=c("0.00-0.25","0.25-0.50", "0.50-0.75", "0.75-1.00"), values=RColorBrewer::brewer.pal(4, "Dark2"))+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.position = "bottom")+coord_cartesian(ylim=c(-0.4,0.4))
# ggsave("plots/Supplement_boxplots_ConvNoConvNTR.svg", width = 7.5, height=5)
```

```{r 10hTraj}
treatment.list <- SplitObject(data, split.by = "treatmentTime")
D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["2h"]],treatment.list[["4h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["4h"]],treatment.list[["6h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["6h"]],treatment.list[["8h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["8h"]],treatment.list[["10h"]], "RNA", "prevRNA_recalc")
)
D.list = prune(D.list)
trajectories_prevRNA_10h = mincostflow(D.list)
colnames(trajectories_prevRNA_10h) <- c("0h", "2h", "4h", "6h", "8h", "10h")
br1=quantile(data$dex.percent.new[trajectories_prevRNA_10h$`10h`], probs = group_quants)[1]
br2=quantile(data$dex.percent.new[trajectories_prevRNA_10h$`10h`], probs = group_quants)[2]

ggplot(data@meta.data[trajectories_prevRNA_10h$`10h`,], aes(x=dex.percent.new))+stat_ecdf()+theme_cowplot()+geom_vline(xintercept = c(br1,br2), col="red")+xlab("DEX score")+ylab("ECDF")+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))
#ggsave("plots/scifateFiltering/ecdf_gc.svg", width=5,height=3,device=grDevices::svg())
gc.group = cut(data$dex.percent.new[trajectories_prevRNA_10h$`10h`],breaks=c(-10,br1,br2,10),labels=c("Low","Middle","High"))

data$Trajectory = "none"
data$Trajectory[trajectories_prevRNA_10h[,1]] = as.character(gc.group)
data$Trajectory[trajectories_prevRNA_10h[,2]]  = as.character(gc.group)
data$Trajectory[trajectories_prevRNA_10h[,3]]  = as.character(gc.group)
data$Trajectory[trajectories_prevRNA_10h[,4]]  = as.character(gc.group)
data$Trajectory[trajectories_prevRNA_10h[,5]]  = as.character(gc.group)
data$Trajectory[trajectories_prevRNA_10h[,6]]  = as.character(gc.group)

data$Trajectory = factor(data$Trajectory,levels=c("none", "Low", "Middle", "High"))

genes = rownames(data)
uninf=t(as.matrix(FetchData(data,vars = genes,cells = trajectories_prevRNA_10h$`0h`,layer = "data")))[,trajectories_prevRNA_10h$`0h`]

hs_prevRNA_10h = compute.hetseq(uninf,gc.group=="High",gc.group=="Low")
n = table(cut(hs_prevRNA_10h$LFC, breaks = c(-Inf, -lfc.cutoff, lfc.cutoff, Inf)), factor(hs_prevRNA_10h$Q > p.cutoff, levels = c("FALSE", "TRUE")))
n=n[c(1,3)]
PlotScatter(hs_prevRNA_10h, x=LFC,y=-log10(Q), remove.outlier = FALSE, rasterize = T,size=-1)+
  geom_point_rast(size=0.5)+xlab(bquote(log[2]~FC~(`0h`)))+ylab(bquote("-" ~ log[10] ~ FDR))+geom_hline(yintercept=-log10(p.cutoff),linetype=2)+geom_vline(xintercept = c(-lfc.cutoff, lfc.cutoff), linetype = 2) + ggtitle("High vs Low DEX score (10h)") + annotate("label", size=0.36*9, x = c(-Inf, Inf), y = c(Inf, Inf), label = paste0("n=", as.numeric(n)), hjust = c(-0.1, 1.1), vjust = c(1.1, 1.1))+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))
#ggsave("/projects/viro/berg/HetSeq/SciFate/plots/scifateFiltering/VulcanoPlot_prevRNA_10h.svg", width=2.7, height=2.8, device=grDevices::svg())

write.table(hs_prevRNA_10h,"tables/SupplTable1_10h.csv")

lower <- rownames(hs_prevRNA_10h[hs_prevRNA_10h$Q<p.cutoff & hs_prevRNA_10h$LFC<(-lfc.cutoff),])
higher <- rownames(hs_prevRNA_10h[hs_prevRNA_10h$Q<p.cutoff & hs_prevRNA_10h$LFC>lfc.cutoff,])
background <- rownames(data)
l = list(lower=lower,higher=higher,background=background)
saveRDS(l, "hs_result-10h_prevRNArecalc.rds")

tx_binary_10h<-HetseqClassify(data, trajectories_prevRNA_10h, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)

write.table(tx_binary_10h, "tables/SupplTable4_10h.csv")


#doubleML_10h <- HetSeq_doubleML(data, trajectories_prevRNA_10h, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), split=split, kernel="radial", basefeatures = features_baseline_cellcycle, posClass=posClass, cross=cross, num_cores = numcores, genes = expressedGenes)
#doubleML_10h$padj <- p.adjust(doubleML_10h$pval, method="BH")
```
```{r 2hTraj + Noise}
treatment.list <- SplitObject(data, split.by = "treatmentTime")
D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc")+ matrix(rnorm(1054*1049, mean=75, sd=50), nrow = 1054, ncol = 1049)
)
D.list = prune(D.list)
trajectories_prevRNA_2hnoise = mincostflow(D.list)
colnames(trajectories_prevRNA_2hnoise) <- c("0h", "2h")
br1=quantile(data$dex.percent.new[trajectories_prevRNA_2hnoise$`2h`], probs = group_quants)[1]
br2=quantile(data$dex.percent.new[trajectories_prevRNA_2hnoise$`2h`], probs = group_quants)[2]
gc.group = cut(data$dex.percent.new[trajectories_prevRNA_2hnoise$`2h`],breaks=c(-10,br1,br2,10),labels=c("Low","Middle","High"))

data$Trajectory = "none"
data$Trajectory[trajectories_prevRNA_2hnoise[,1]] = as.character(gc.group)
data$Trajectory[trajectories_prevRNA_2hnoise[,2]]  = as.character(gc.group)

data$Trajectory = factor(data$Trajectory,levels=c("none", "Low", "Middle", "High"))

genes = rownames(data)
uninf=t(as.matrix(FetchData(data,vars = genes,cells = trajectories_prevRNA_2hnoise$`0h`,layer = "data")))[,trajectories_prevRNA_2hnoise$`0h`]

hs_prevRNA_2hnoise = compute.hetseq(uninf,gc.group=="High",gc.group=="Low")
n = table(cut(hs_prevRNA_2hnoise$LFC, breaks = c(-Inf, -lfc.cutoff, lfc.cutoff, Inf)), factor(hs_prevRNA_2hnoise$Q > p.cutoff, levels = c("FALSE", "TRUE")))
n=n[c(1,3)]
PlotScatter(hs_prevRNA_2hnoise, x=LFC,y=-log10(Q), remove.outlier = FALSE, rasterize = T,size=-1)+
  geom_point_rast(size=0.5)+xlab(bquote(log[2]~FC~(`0h`)))+ylab(bquote("-" ~ log[10] ~ FDR))+geom_hline(yintercept=-log10(p.cutoff),linetype=2)+geom_vline(xintercept = c(-lfc.cutoff, lfc.cutoff), linetype = 2) + ggtitle("High vs Low DEX score (2h)") + annotate("label", size=0.36*9, x = c(-Inf, Inf), y = c(Inf, Inf), label = paste0("n=", as.numeric(n)), hjust = c(-0.1, 1.1), vjust = c(1.1, 1.1))+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))

tx_binary_2hnoise<-HetseqClassify(data, trajectories_prevRNA_2hnoise, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)
ggplot(tx_binary_2hnoise, aes(x=AUC, y=LFC,label=Gene, color=density2d(x=AUC,y=LFC, n = 1000)))+geom_point_rast(raster.dpi = 600)+scale_color_viridis_c()+xlab("AUC")+
  geom_point_rast(data=tx_binary_2hnoise[tx_binary_2hnoise$Gene%in%gc_manualfind & tx_binary_2hnoise$AUC>0.755,],aes(x=AUC,y=LFC),color="red")+
  geom_point_rast(data=tx_binary_2hnoise[tx_binary_2hnoise$Gene%in%cytoskeletal_signaling & tx_binary_2hnoise$AUC>0.755,],aes(x=AUC,y=LFC),color="cyan3")+
  geom_point_rast(data=tx_binary_2hnoise[tx_binary_2hnoise$Gene%in%nucl_receptor_metapathway & tx_binary_2hnoise$AUC>0.755,],aes(x=AUC,y=LFC),color="green")+
  theme_cowplot()+ylab(bquote(log[2]~FC~(`0h`)))+ggtitle("Predicting High or Low DEX score (2h)")+
  geom_vline(xintercept = tx_binary_2hnoise["baseline",]$AUC, linetype="dashed")+geom_hline(yintercept = 0)+
  theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.position="none")+
    geom_label_repel(data=tx_binary_2hnoise[tx_binary_2hnoise$Gene%in%c("TRAM1", "ZFP36L1"),], aes(x=AUC, y=LFC, label=Gene), color="red", nudge_y =0.6 ,size=2.5)+
      geom_label_repel(data=tx_binary_2hnoise[tx_binary_2hnoise$Gene=="ANXA1",], aes(x=AUC, y=LFC, label=Gene), color="red", nudge_y = -0.4,size=2.5)+
    geom_label_repel(data=tx_binary_2hnoise[tx_binary_2hnoise$Gene=="ACTN4",], aes(x=AUC, y=LFC, label=Gene), color="cyan3", nudge_y = 0.6,size=2.5)+
    geom_label_repel(data=tx_binary_2hnoise[tx_binary_2hnoise$Gene%in%c("HSP90AB1", "G6PD"),], aes(x=AUC, y=LFC, label=Gene), color="green2", nudge_y = -0.2,size=2.5)

#doubleML_2hnoise <- HetSeq_doubleML(data, trajectories_prevRNA_2hnoise, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), split=split, kernel="radial", basefeatures = features_baseline_cellcycle, posClass=posClass, cross=cross, num_cores = numcores, genes = expressedGenes)

#doubleML_2hnoise$padj <- p.adjust(doubleML_2hnoise$pval, method="BH")

```


```{r SupplTotalRNATraj}

treatment.list <- SplitObject(subset(data, subset = treatmentTime %in% c("0h", "2h")), split.by = "treatmentTime")
D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "RNA")
)
D.list = prune(D.list)
trajectories_totalRNA = mincostflow(D.list)
colnames(trajectories_totalRNA) <- c("0h", "2h")
br1=quantile(data$dex.percent.new[trajectories_totalRNA$`2h`], probs = group_quants)[1]
br2=quantile(data$dex.percent.new[trajectories_totalRNA$`2h`], probs = group_quants)[2]

ggplot(data@meta.data[trajectories_totalRNA$`2h`,], aes(x=dex.percent.new))+stat_ecdf()+theme_cowplot()+geom_vline(xintercept = c(br1,br2), col="red")+ylab("ECDF")+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))
gc.group = cut(data$dex.percent.new[trajectories_totalRNA$`2h`],breaks=c(-10,br1,br2,10),labels=c("Low","Middle","High"))

genes = rownames(data)
uninf=t(as.matrix(FetchData(data,vars = genes,cells = trajectories_totalRNA$`0h`,layer = "data")))[,trajectories_totalRNA$`0h`]

hs_totalRNA = compute.hetseq(uninf,gc.group=="High",gc.group=="Low")
n = table(cut(hs_totalRNA$LFC, breaks = c(-Inf, -lfc.cutoff, lfc.cutoff, Inf)), factor(hs_totalRNA$Q > p.cutoff, levels = c("FALSE", "TRUE")))
n=n[c(1,3)]
PlotScatter(hs_totalRNA, x=LFC,y=-log10(Q), remove.outlier = FALSE, rasterize=TRUE,size=-1)+
  geom_point_rast(scale = 0.5)+xlab(bquote(log[2]~FC~(`0h`)))+ylab(bquote("-" ~ log[10] ~ FDR))+
  geom_point_rast(data=hs_totalRNA[c(higher,lower),], aes(x=LFC,y=-log10(Q)),color="red", alpha=0.5,scale=0.5)+
  geom_hline(yintercept=-log10(p.cutoff),linetype=2)+geom_vline(xintercept = c(-lfc.cutoff, lfc.cutoff), linetype = 2) +
  ggtitle("High vs Low GC Response (2h)") +
  annotate("label", size=0.36*9, x = c(-Inf, Inf), y = c(Inf, Inf), label = paste0("n=", as.numeric(n)), hjust = c(-0.1, 1.1), vjust = c(1.1, 1.1))+
    theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize))
# ggsave("/projects/viro/berg/HetSeq/SciFate/plots/scifateFiltering/VulcanoPlot_totalRNA.svg", width=2.7, height=2.8, device=grDevices::svg())


tx_binary_totalRNA<-HetseqClassify(data, trajectories_totalRNA, score.name="dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)

ggplot(tx_binary_totalRNA, aes(x=AUC, y=LFC,label=Gene, color=density2d(x=AUC,y=LFC, n = 1000)))+
  geom_point_rast(scale = 0.5)+scale_color_viridis_c()+xlab("AUC")+
  geom_point_rast(data=tx_binary_totalRNA[tx_binary_totalRNA$Gene%in%tg,],aes(x=AUC,y=LFC),color="red", alpha=0.5, scale = 0.5)+
  theme_cowplot()+ylab(bquote(log[2]~FC~(`0h`)))+ggtitle("Predicting Low or High DEX score (2h)")+
  geom_vline(xintercept = tx_binary_totalRNA["baseline",]$AUC, linetype="dashed")+geom_hline(yintercept = 0)+
  theme(text=element_text(size = textsize, family=mainfont), axis.text=element_text(size=axissize), legend.position="none")
# ggsave("/projects/viro/berg/HetSeq/SciFate/plots/scifateFiltering/Classifier_totalRNA.svg", width=5.2, height=2.8, device=grDevices::svg(), dpi = 1200)
```


```{r, warning=FALSE}
## Trajectories in 2h windows
features_baseline_pertime<-c("cc_umap1", "cc_umap2", "dex.percent.new")

treatment.list <- SplitObject(data, split.by = "treatmentTime")
D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc")
)
D.list = prune(D.list)
trajectories_0h2h= mincostflow(D.list)
colnames(trajectories_0h2h) <- c("0h", "2h")

D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["2h"]],treatment.list[["4h"]], "RNA", "prevRNA_recalc")
)
D.list = prune(D.list)
trajectories_0h4h= mincostflow(D.list)
colnames(trajectories_0h4h) <- c("0h", "2h", "4h")

D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["2h"]],treatment.list[["4h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["4h"]],treatment.list[["6h"]], "RNA", "prevRNA_recalc")
)
D.list = prune(D.list)
trajectories_0h6h= mincostflow(D.list)
colnames(trajectories_0h6h) <- c("0h", "2h","4h", "6h")

D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["2h"]],treatment.list[["4h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["4h"]],treatment.list[["6h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["6h"]],treatment.list[["8h"]], "RNA", "prevRNA_recalc")
)
D.list = prune(D.list)
trajectories_0h8h= mincostflow(D.list)
colnames(trajectories_0h8h) <- c("0h", "2h","4h","6h", "8h")

D.list=list(
    distmat(treatment.list[["0h"]],treatment.list[["2h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["2h"]],treatment.list[["4h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["4h"]],treatment.list[["6h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["6h"]],treatment.list[["8h"]], "RNA", "prevRNA_recalc"),
    distmat(treatment.list[["8h"]],treatment.list[["10h"]], "RNA", "prevRNA_recalc")
)
D.list = prune(D.list)
trajectories_0h10h= mincostflow(D.list)
colnames(trajectories_0h10h) <- c("0h", "2h","4h","6h", "8h", "10h")


## Hetseq
tx_0h2h <- HetseqClassify(data, trajectories_0h2h, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)

tx_0h4h <- HetseqClassify(data, trajectories_0h4h, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)

tx_0h6h <-HetseqClassify(data, trajectories_0h6h, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)

tx_0h8h <- HetseqClassify(data, trajectories_0h8h, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)

tx_0h10h <- HetseqClassify(data, trajectories_0h10h, score.name = "dex.percent.new", quantiles = c(0.25,0.75), compareGroups = c("Low", "High"), basefeatures = features_baseline_cellcycle, split=split, kernel="radial", posClass=posClass, cross=cross, genes = expressedGenes)

## Plotting
top_dexinfo <- setdiff(head(tx_0h2h$Gene, n=20), "baseline")


colnames(tx_0h2h) <- c("AUC.0h2h", "Gene", "LFC.0h2h")
colnames(tx_0h4h) <- c("AUC.0h4h", "Gene", "LFC.0h4h")
colnames(tx_0h6h) <- c("AUC.0h6h", "Gene", "LFC.0h6h")
colnames(tx_0h8h) <- c("AUC.0h8h", "Gene", "LFC.0h8h")
colnames(tx_0h10h) <- c("AUC.0h10h", "Gene", "LFC.0h10h")

tx_cascading <- merge(merge(merge(merge(tx_0h2h, tx_0h4h, by="Gene"), tx_0h6h, by="Gene"), tx_0h8h, by="Gene"), tx_0h10h, by="Gene")
tx_cascading <- tx_cascading[,c("Gene", "AUC.0h2h", "AUC.0h4h", "AUC.0h6h", "AUC.0h8h", "AUC.0h10h")]
tx_cascading$AUC.0h2h <- rank(tx_cascading$AUC.0h2h)
tx_cascading$AUC.0h4h <- rank(tx_cascading$AUC.0h4h)
tx_cascading$AUC.0h6h <- rank(tx_cascading$AUC.0h6h)
tx_cascading$AUC.0h8h <- rank(tx_cascading$AUC.0h8h)
tx_cascading$AUC.0h10h <- rank(tx_cascading$AUC.0h10h)

tx_cascading_melt <- melt(tx_cascading)

geneset = c("ACTN4", "FOSL2", "TXNRD1", "GRB10", "CCDC80")
ggplot(tx_cascading_melt[tx_cascading_melt$Gene%in%geneset,], aes(x=variable, y=value, color=Gene, group=Gene))+geom_smooth()+scale_y_log10()+theme_cowplot()+labs(x = "time frame", y = bquote(log[10]~"AUC rank"))+theme(legend.title = element_blank())+scale_x_discrete(labels=c("0h-2h", "0h-4h", "0h-6h", "0h-8h", "0h-10h"))+scale_color_manual(values=RColorBrewer::brewer.pal(9, "Dark2"))
ggplot(tx_cascading_melt[tx_cascading_melt$Gene%in%top_dexinfo,], aes(x=variable, y=value, color=Gene, group=Gene))+geom_smooth()+scale_y_log10()+theme_cowplot()+labs(x = "Time frame", y = bquote(log[10]~"AUC rank"))+theme(legend.title = element_blank())+scale_x_discrete(labels=c("0h-2h", "0h-4h", "0h-6h", "0h-8h", "0h-10h"))
```

```{r compare2h10, fig.width=8, fig.height=2.5}
colnames(tx_binary) <- c("AUC.2h", "Gene", "LFC.2h")
colnames(tx_binary_10h) <- c("AUC.10h", "Gene", "LFC.10h")
colnames(tx_binary_2hnoise) <- c("AUC.2h.noise", "Gene", "LFC.2h.noise")

tx_binary_combined <- merge(tx_binary, tx_binary_10h, by="Gene")
tx_binary_combined <- merge(tx_binary_combined, tx_binary_2hnoise, by="Gene")

tx_binary_combined$AUC.2h<-tx_binary_combined$AUC.2h/sum(tx_binary_combined$AUC.2h)*10000
tx_binary_combined$AUC.10h<-tx_binary_combined$AUC.10h/sum(tx_binary_combined$AUC.10h)*10000
tx_binary_combined$AUC.2h.noise<-tx_binary_combined$AUC.2h.noise/sum(tx_binary_combined$AUC.2h.noise)*10000

a<-ggplot(tx_binary_combined, aes(x=AUC.2h, y=AUC.10h, color=density2d(AUC.2h, AUC.10h)))+geom_point_rast(size=0.2)+theme_cowplot()+scale_color_viridis_c()+theme(legend.position = "none")+ggpubr::stat_cor()+geom_abline(slope=1,color="red")+labs(x="norm. AUC (2h)", y="norm. AUC (10h)")
b<-ggplot(tx_binary_combined, aes(x=AUC.2h.noise, y=AUC.10h, color=density2d(AUC.2h.noise, AUC.10h)))+geom_point_rast(size=0.2)+theme_cowplot()+scale_color_viridis_c()+theme(legend.position = "none")+ggpubr::stat_cor()+geom_abline(slope=1,color="red")+labs(x="norm. AUC (2h+Noise)", y="norm. AUC (10h)")
c<-ggplot(tx_binary_combined, aes(x=AUC.2h, y=AUC.2h.noise, color=density2d(AUC.2h, AUC.2h.noise)))+geom_point_rast(size=0.2)+theme_cowplot()+scale_color_viridis_c()+theme(legend.position = "none")+ggpubr::stat_cor()+geom_abline(slope=1,color="red")+geom_smooth(method="lm")+labs(x="norm. AUC (2h)", y="norm. AUC (2h+Noise)")
ggarrange(a,b,c, nrow = 1, labels = "AUTO", font.label = list(size=12, face="bold"))
#ggsave("plots/Supplement/S7.svg", device=grDevices::svg(), width=8, height = 2.5)
```

```{r, fig.width=8, fig.height=2}
tx_sum <- merge(tx_0h2h, tx_0h4h, by="Gene")
tx_sum <- merge(tx_sum, tx_0h6h, by="Gene")
tx_sum <- merge(tx_sum, tx_0h8h, by="Gene")
tx_sum <- merge(tx_sum, tx_0h10h, by="Gene")

xinter <- 1.5
yinter <- 1.5

tx_sum$AUC.0h2h<-tx_sum$AUC.0h2h/sum(tx_sum$AUC.0h2h)*10000
tx_sum$AUC.0h4h<-tx_sum$AUC.0h4h/sum(tx_sum$AUC.0h4h)*10000
tx_sum$AUC.0h6h<-tx_sum$AUC.0h6h/sum(tx_sum$AUC.0h6h)*10000
tx_sum$AUC.0h8h<-tx_sum$AUC.0h8h/sum(tx_sum$AUC.0h8h)*10000
tx_sum$AUC.0h10h<-tx_sum$AUC.0h10h/sum(tx_sum$AUC.0h10h)*10000

highlightedGenes <- tx_sum[tx_sum$AUC.0h2h>xinter & tx_sum$AUC.0h4h > yinter,]$Gene

a<-ggplot(tx_sum, aes(x=AUC.0h2h, y=AUC.0h4h, color=density2d(AUC.0h2h, AUC.0h4h)))+geom_point_rast(size=0.2)+geom_point_rast(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h, y=AUC.0h4h), color="red", size=0.2)+geom_label_repel(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h,y=AUC.0h4h, label=Gene),color="red", size=2.5)+theme_cowplot()+scale_color_viridis_c()+theme(text=element_text(size = textsize), axis.text=element_text(size=axissize), legend.position="none")+ggpubr::stat_cor(size=2.5)+geom_abline(slope=1,color="red")+labs(x="norm. AUC (0h-2h)", y="norm. AUC (0h-4h)")+coord_cartesian(xlim=c(1.37, 1.61), ylim=c(1.35, 1.66))+scale_x_continuous(breaks = c(1.4, 1.5, 1.6))
b<-ggplot(tx_sum, aes(x=AUC.0h2h, y=AUC.0h6h, color=density2d(AUC.0h2h, AUC.0h6h)))+geom_point_rast(size=0.2)+geom_point_rast(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h, y=AUC.0h6h), color="red", size=0.2)+geom_label_repel(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h,y=AUC.0h6h,label=Gene),color="red", size=2.5)+theme_cowplot()+scale_color_viridis_c()+theme(text=element_text(size = textsize), axis.text=element_text(size=axissize), legend.position="none")+ggpubr::stat_cor(size=2.5)+geom_abline(slope=1,color="red")+labs(x="norm. AUC (0h-2h)", y="norm. AUC (0h-6h)")+coord_cartesian(xlim=c(1.37, 1.61), ylim=c(1.35, 1.66))+scale_x_continuous(breaks = c(1.4, 1.5, 1.6))
c<-ggplot(tx_sum, aes(x=AUC.0h2h, y=AUC.0h8h, color=density2d(AUC.0h2h, AUC.0h8h)))+geom_point_rast(size=0.2)+geom_point_rast(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h, y=AUC.0h8h), color="red", size=0.2)+geom_label_repel(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h,y=AUC.0h8h, label=Gene),color="red", size=2.5)+theme_cowplot()+scale_color_viridis_c()+theme(text=element_text(size = textsize), axis.text=element_text(size=axissize), legend.position="none")+ggpubr::stat_cor(size=2.5)+geom_abline(slope=1,color="red")+labs(x="norm. AUC (0h-2h)", y="norm. AUC (0h-8h)")+coord_cartesian(xlim=c(1.37, 1.61), ylim=c(1.35, 1.66))+scale_x_continuous(breaks = c(1.4, 1.5, 1.6))
d<-ggplot(tx_sum, aes(x=AUC.0h2h, y=AUC.0h10h, color=density2d(AUC.0h2h, AUC.0h10h)))+geom_point_rast(size=0.2)+geom_point_rast(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h, y=AUC.0h10h), color="red", size=0.2)+geom_label_repel(data=tx_sum[tx_sum$Gene=="ARNTL2",], aes(x=AUC.0h2h,y=AUC.0h10h, label=Gene),color="red", size=2.5)+theme_cowplot()+scale_color_viridis_c()+theme(text=element_text(size = textsize), axis.text=element_text(size=axissize), legend.position="none")+ggpubr::stat_cor(size=2.5)+geom_abline(slope=1,color="red")+labs(x="norm. AUC (0h-2h)", y="norm. AUC (0h-10h)")+coord_cartesian(xlim=c(1.37, 1.61), ylim=c(1.35, 1.66))+scale_x_continuous(breaks = c(1.4, 1.5, 1.6))
ggarrange(a,b,c,d, nrow = 1)
#ggsave("plots/scifateFiltering/scatter_cascadingFrom0h.svg",width = 8,height=2)

save.image("2_Analysis.RData")
```