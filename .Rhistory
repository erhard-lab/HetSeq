getwd()
deps <- renv::dependencies()
usethis::use_package(unique(deps$Package))
deps
usethis::use_package(unique(deps$Package))
usethis::use_package(unique(deps$Package))
attachment::att_amend_desc()
install.packages("attachment")
attachment::att_amend_desc()
attachment::att_amend_desc()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
warnings()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
warnings()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
l = list(c("a", "b", "C", "d"), c("1","2","3"))
for(x in range(1,length(l))){print(i)}
for(x in range(1,length(l))){print(x)}
l[1]
l[[1]]
DiscretePalette(palette_size)
Seurat::DiscretePalette(palette_size)
Seurat::DiscretePalette(36)
library(ggplot2)
library(Seurat)
attachment::att_amend_desc()
attachment::att_amend_desc()
plot.classify <- function(table, highlights, highlights.color=Seurat::DiscretePalette(36), highlights.cutoff=NULL, label.cutoff=1.1, density.n=500, point.scale=0.5, xlab="AUC", ylab=bquote(log[2]~FC~(`0h`)), linetype="dashed"){
plot <- ggplot(table, aes(x=AUC, y=LFC,label=Gene, color=density2d(x=AUC,y=LFC, n = density.n)))+geom_point_rast(scale=point.scale)+
scale_color_viridis_c()+xlab(xlab)+ylab(ylab)+theme_cowplot()+
geom_vline(xintercept = table["baseline",]$AUC, linetype=linetype)+geom_hline(yintercept = 0)+
theme(legend.position="none")
for(i in range(1,length(highlights)){
attachment::att_amend_desc()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(grandR)
library(ggplot2)
library(Seurat)
library(cowplot)
library(ggpubr)
library(ggrastr)
library(reshape2)
#Plot variables, colors
legendsize = 9
textsize=11
axissize=10
mainfont = "Arial"
responsecolors = c("#0033a3ff", "#eec721ff","#a30000ff")
prevtotalcolors = c("#298c8c", "#800074")
colors=c(RColorBrewer::brewer.pal(9,"Blues")[7],RColorBrewer::brewer.pal(9,"Reds")[c(2,4,6,8)],RColorBrewer::brewer.pal(9,"Greens")[c(3)],'gray80','gray30')
tcolors = c(none='gray80',Low='gray40',Middle='#3182bd',High='#de2d26')
#Hetseq variables
group_quants = c(0.25,0.75)
lfc.cutoff=0.1
p.cutoff=0.05
split=NULL
cross=10
numcores=64
numgenes=3000
posClass = "High"
features_baseline <- c("test")
features_baseline_cellcycle<-c("cc_umap1", "cc_umap2")
#genes_classif <- rownames(HVFInfo(data)[HVFInfo(data)$mean>0.3,])
genes_classif = rownames(data)
# Pathway genes
gc_regnetwork <- read.csv("data/pathway_gcregnetwork.csv")$x
nucl_receptor_metapathway <- read.csv("data/pathway_nuclearreceptor_metapathway.csv")$x
gluc_recep_pathway <-read.csv("data/pathway_glucreceptor.csv")$x
cytoskeletal_signaling <- read.csv("data/pathway_cytoskeletalsignaling.csv")$x
gc_manualfind <- c("ZFP36L1", "TRAM1", "HSP90AB1", "XPO1")#, "PMEPA1")
setwd("/projects/viro/berg/HetSeq/SciFate")
data <- readRDS("objects/data_preprocessed_scifateFiltering_mincol100.rds")
data<-NormalizeData(data, assay = "RNA")
data<-NormalizeData(data, assay = "newRNA")
data<-NormalizeData(data, assay = "oldRNA")
data<-NormalizeData(data, assay = "prevRNA")
data<-NormalizeData(data, assay = "newRNA_recalc")
data<-NormalizeData(data, assay = "oldRNA_recalc")
data<-NormalizeData(data, assay = "prevRNA_recalc")
gc_genes <- readRDS("/projects/viro/sakellaridi/scifate/objects/gc_genes.rds")
data$dex.percent <- Seurat::PercentageFeatureSet(object=data, features=intersect(gc_genes,rownames(data)), assay="RNA")
data <- AddModuleScore(data, list(dex.percent=intersect(rownames(data),gc_genes)), name = "DEX.modulescore")
data <- AddModuleScore(data, list(dex.percent=intersect(rownames(data),gc_genes)), name = "DEX.modulescore.new", assay = "newRNA_recalc")
data$dex.percent <- data$DEX.modulescore1
data$dex.percent.new <- data$DEX.modulescore.new1
data$DEX.modulescore1<-NULL
data$DEX.modulescore.new1<-NULL
expr <- HVFInfo(subset(data, subset = treatmentTime == "0h"))
expressedGenes <- rownames(expr[expr$mean>0.5,])
devtools::load_all(".")
df=as.data.frame(data@reductions$umap@cell.embeddings)
df$Condition=data$treatmentTime
df$dex.percent.new = data$dex.percent.new
ggplot(df, aes(x=umap_1,y=umap_2,color=dex.percent.new))+geom_point_rast(size=0.2)+scale_color_viridis_c(option = "turbo", name="DEX score", limits=c(0,0.8), oob=scales::squish)+theme_cowplot()+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_blank(), legend.text = element_text(size=legendsize), axis.title = element_blank(), axis.ticks = element_blank(),legend.position = "right", axis.line = element_line())
#ggsave("plots/scifateFiltering/dimplot_gc.png", width=3.3, height=2.25)
#ggsave("plots/scifateFiltering/dimplot_gc.svg", width=3, height=2, device=grDevices::svg())
ggplot(df, aes(x=umap_1,y=umap_2,color=Condition))+geom_point_rast(size=0.2)+scale_color_brewer(palette="Set1")+theme(legend.title = element_blank())+guides(color = guide_legend(override.aes = list(size = 2)))+theme_cowplot()+theme(text=element_text(size = textsize, family=mainfont), axis.text=element_blank(), legend.text = element_text(size=legendsize), axis.title = element_blank(), axis.ticks = element_blank(),legend.position = "right", axis.line = element_line(), legend.title = element_blank())
#ggsave("plots/scifateFiltering/dimplot_time.png", width=3.3, height=2.25)
#ggsave("plots/scifateFiltering/dimplot_time.svg", width=3, height=2, device=grDevices::svg())
tab <- FetchData(data, c("treatmentTime", "dex.percent", "dex.percent.new"))
tab_melt <- melt(tab)
ggplot(tab_melt, aes(x=treatmentTime, y=value,color=variable))+geom_boxplot()+theme_cowplot()+theme(axis.title.x = element_blank())+
scale_color_manual(values = c("#298c8c", "#800074"),labels = c("total RNA", "new RNA"))+ylab("DEX score")+theme(text=element_text(size = textsize, family = mainfont), axis.text=element_text(size=axissize), legend.text = element_text(size=legendsize), legend.title = element_blank(), legend.position = "bottom")
# ggsave("plots/scifateFiltering/gcpercent_box.png", height=2.2,width=2.2, bg="white")
# ggsave("plots/scifateFiltering/gcpercent_box.svg", height=2.2,width=2.2, bg="white", device=grDevices::svg())
?distmat
?hetseq
attachment::att_amend_desc()
roxygenise();      # Builds the help files
library(roxygen2)
roxygenise();      # Builds the help files
attachment::att_amend_desc()
roxygenise();      # Builds the help files
?hetseq
roxygenise();      # Builds the help files
?hetseq
roxygenise();      # Builds the help files
?hetseq
library(roxygen2)
attachment::att_amend_desc()
roxygenise();      # Builds the help files
devtools::install_github("https://github.com/erhard-lab/HetSeq", auth_token = "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")
library(HetSeq)
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
library(ggplot2)
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
library(ggrastr)
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
library(cowplot)
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
roc()
stats::roc()
library(Seurat)
library(ggplot2)
library(HetSeq)
data <- readRDS("/projects/viro/doelken/4virus/SARS_RSV_IAV_VACV/Calu3_4Viruses/outs/SLAMalyze/VACV/seurat_vacv_cc.rds")
pbs <- read.table("/projects/viro/doelken/4virus/SARS_RSV_IAV_VACV/Calu3_4Viruses/outs/grand3/pb_VL_3.tsv", header = T)
rownames(pbs) <- pbs$Cell
data$response.group <- pbs[Cells(data),]$Pseudobulk
data$response.new <- "Mock"
data@meta.data[data@meta.data$response.group == "Bystander.VACV.2hpi.4sU" | data@meta.data$response.group == "Bystander.VACV.4hpi.4sU",]$response.new <- "Bystander"
data@meta.data[data@meta.data$response.group == "entry.VACV.2hpi.4sU" | data@meta.data$response.group == "entry.VACV.4hpi.4sU",]$response.new <- "Entry"
data@meta.data[data@meta.data$response.group == "LVL.VACV.2hpi.4sU" | data@meta.data$response.group == "LVL.VACV.4hpi.4sU" | data@meta.data$response.group == "HVL.VACV.2hpi.4sU" | data@meta.data$response.group == "HVL.VACV.4hpi.4sU", ]$response.new <- "Infected"
data$response.new <- factor(data$response.new, levels = c("Mock", "Bystander", "Entry", "Infected"))
data$cc_umap1 <- as.data.frame(data@reductions$umap@cell.embeddings)$umap_1
data$cc_umap2 <- as.data.frame(data@reductions$umap@cell.embeddings)$umap_2
ggplot(FetchData(data, c("response.new", "percent.VACV.new", "hpi")), aes(x=response.new, y = percent.VACV.new))+geom_boxplot()+facet_wrap(~hpi)
basefeatures = c("cc_umap1", "cc_umap2")
expr <- HVFInfo(subset(data, subset = hpi == "0hpi"))
expressedGenes <- rownames(expr[expr$mean>0.5,])
hpi.list <- SplitObject(subset(data, subset = hpi %in% c("0hpi", "2hpi")), split.by = "hpi")
D.list=list(
distmat(hpi.list[["0hpi"]],hpi.list[["2hpi"]], "RNA", "prevRNA")
)
D.list = prune(D.list)
trajectories_2h = mincostflow(D.list)
response.group <- data$response.new[trajectories_2h$G2]
res_2h <- HetseqClassify(data, trajectories_2h, score.group = response.group, compareGroups = c("Bystander", "Infected"), basefeatures = basefeatures, num_cores = 32, posClass = "Infected", genes = expressedGenes)
devtools::install_github("https://github.com/erhard-lab/HetSeq", auth_token = "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")
library(HetSeq)
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
View(grandR::Plot4sUDropout)
source("R/plot.R")
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
source("R/plot.R")
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
source("R/plot.R")
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"), highlights = "F3")
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"), highlights = "F3", highlight.p.cutoff = 1)
devtools::install_github("https://github.com/erhard-lab/HetSeq", auth_token = "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")
library(HetSeq)
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
attachment::att_amend_desc()
roxygenise();      # Builds the help files
roxygen2::roxygenise();      # Builds the help files
devtools::install_github("https://github.com/erhard-lab/HetSeq", auth_token = "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")
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
library(HetSeq)
PlotDoubleML(read.csv("/projects/viro/berg/HetSeq/4Virus/HetSeq_VACV/hs_2h_doubleML_CC.csv"))
devtools::install_github("https://github.com/erhard-lab/HetSeq", auth_token = "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")
